name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build-linux:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        compiler: [gcc, clang]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libsecp256k1-dev build-essential
        sudo apt-get install -y valgrind lcov cppcheck
        
    - name: Set up GCC
      if: matrix.compiler == 'gcc'
      run: |
        sudo apt-get install -y gcc g++
        echo "CC=gcc" >> $GITHUB_ENV
        echo "CXX=g++" >> $GITHUB_ENV
        
    - name: Set up Clang
      if: matrix.compiler == 'clang'
      run: |
        sudo apt-get install -y clang
        echo "CC=clang" >> $GITHUB_ENV
        echo "CXX=clang++" >> $GITHUB_ENV
        
    - name: Verify compiler installation
      run: |
        echo "Using compiler: $CXX"
        $CXX --version
        
    - name: Build project
      run: make
      
    - name: Run unit tests
      run: make test-unit
      
    - name: Run integration tests
      run: make test-integration
      
    - name: Run security tests
      run: make test-security
      
    - name: Run performance tests
      run: make test-performance
        
    - name: Test known vectors
      run: |
        ./wallet_generator -a "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about"
        
    - name: Test custom derivation
      run: |
        ./wallet_generator -n ethereum -p "m/44'/60'/0'/0/5" "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about"

  build-macos:
    runs-on: macos-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        # Check and install only if needed
        brew list openssl &>/dev/null || brew install openssl
        brew list secp256k1 &>/dev/null || brew install secp256k1
        
    - name: Build project
      run: make
      
    - name: Run tests
      run: |
        make test-unit
        make test-integration
        make test-security
      
    - name: Test functionality
      run: |
        ./wallet_generator -n bitcoin "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about"

  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libsecp256k1-dev build-essential cppcheck valgrind
        
    - name: Build project
      run: make
        
    - name: Static analysis with cppcheck
      run: make static-analysis
        
    - name: Memory leak check with Valgrind
      run: make memtest

  code-coverage:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libsecp256k1-dev build-essential lcov
        
    - name: Build and run coverage
      run: make coverage
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./tests/coverage.info
        fail_ci_if_error: false

  comprehensive-test:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libsecp256k1-dev build-essential valgrind lcov cppcheck
        
    - name: Make scripts executable
      run: chmod +x scripts/*.sh
        
    - name: Run comprehensive test suite
      run: ./scripts/run_tests.sh --all
      
    - name: Upload test artifacts
      uses: actions/upload-artifact@v4
      if: always() && (hashFiles('tests/coverage_html/**') != '' || hashFiles('artifacts/**') != '')
      with:
        name: test-results
        path: |
          tests/coverage_html/
          artifacts/
        retention-days: 7

  # Additional job to test with latest Ubuntu LTS compilers
  build-ubuntu-latest:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        compiler: 
          - { cc: gcc-11, cxx: g++-11 }
          - { cc: clang-14, cxx: clang++-14 }
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y libssl-dev libsecp256k1-dev build-essential
        
    - name: Install specific compiler
      run: |
        sudo apt-get install -y ${{ matrix.compiler.cc }} ${{ matrix.compiler.cxx }}
        
    - name: Set compiler environment
      run: |
        echo "CC=${{ matrix.compiler.cc }}" >> $GITHUB_ENV
        echo "CXX=${{ matrix.compiler.cxx }}" >> $GITHUB_ENV
        
    - name: Verify compiler
      run: |
        ${{ matrix.compiler.cxx }} --version
        
    - name: Build with specific compiler
      run: make CXX=${{ matrix.compiler.cxx }}
      
    - name: Test basic functionality
      run: |
        ./wallet_generator "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about"


  # Test windows build
  build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        build_type: [Release, Debug]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Visual Studio environment
      uses: microsoft/setup-msbuild@v2
      
    - name: Setup vcpkg
      run: |
        # Install vcpkg
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        cd C:\vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe integrate install
        
    - name: Install dependencies
      run: |
        cd C:\vcpkg
        # Install OpenSSL
        .\vcpkg.exe install openssl:x64-windows
        
        # Try to install secp256k1 (fallback to minimal implementation if not available)
        .\vcpkg.exe install secp256k1:x64-windows
        
    - name: Configure CMake
      run: |
        mkdir build
        cd build
        cmake .. -DCMAKE_TOOLCHAIN_FILE=C:\vcpkg\scripts\buildsystems\vcpkg.cmake -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        
    - name: Build project
      run: |
        cd build
        cmake --build . --config ${{ matrix.build_type }}
        
    - name: Copy test runner to build directory
      run: |
        copy scripts\run_tests.bat build\${{ matrix.build_type }}\
        
    - name: Run Windows test suite
      run: |
        cd build\${{ matrix.build_type }}
        .\run_tests.bat --all
        
    - name: Test cross-platform compatibility
      run: |
        cd build\${{ matrix.build_type }}
        echo "Testing cross-platform wallet compatibility..."
        
        # Generate same wallet on Windows and compare format
        .\wallet_generator.exe -v "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about" > windows_output.txt
        
        # Check that output contains expected elements
        findstr /C:"Private Key:" windows_output.txt || exit 1
        findstr /C:"Address:" windows_output.txt || exit 1
        findstr /C:"=== bitcoin Wallet ===" windows_output.txt || exit 1
        
    - name: Performance test
      run: |
        cd build\${{ matrix.build_type }}
        echo "Running performance test..."
        
        # Time the execution (basic measurement)
        powershell -Command "Measure-Command { .\wallet_generator.exe -c 10 'abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about' }"
        
    - name: Upload Windows artifacts
      uses: actions/upload-artifact@v4
      if: matrix.build_type == 'Release'
      with:
        name: windows-binaries-${{ runner.os }}
        path: |
          build/Release/wallet_generator.exe
          build/Release/*.dll
          build/Release/windows_output.txt
        retention-days: 7
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: windows-test-results-${{ matrix.build_type }}
        path: |
          build/${{ matrix.build_type }}/windows_output.txt
        retention-days: 3

  # Optional: Windows compatibility test (cross-validate with Linux)
  windows-compatibility:
    runs-on: windows-latest
    needs: [build-linux, build-windows]
    if: github.event_name == 'pull_request'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download Windows artifacts
      uses: actions/download-artifact@v4
      with:
        name: windows-binaries-windows
        path: windows-build/
        
    - name: Setup vcpkg (minimal for runtime)
      run: |
        git clone https://github.com/Microsoft/vcpkg.git C:\vcpkg
        cd C:\vcpkg
        .\bootstrap-vcpkg.bat
        .\vcpkg.exe install openssl:x64-windows
        
    - name: Cross-platform wallet validation
      run: |
        cd windows-build
        
        # Test that Windows generates same addresses as Linux for same inputs
        echo "Cross-platform validation test..."
        .\wallet_generator.exe "abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon abandon about" > win_test.txt
        
        # Basic validation that expected format is present
        findstr /C:"1BvBMSEYstWetqTFn5Au4m4GFg7xJaNVN2" win_test.txt || echo "Address format validation needed"
        
        echo "Windows compatibility test completed"